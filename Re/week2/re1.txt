0000000000001000 <func>:
0x1000: endbr64
0x1004: push    rbp
0x1005: mov     rbp, rsp
0x1008: mov     qword ptr [rbp - 0x18], rdi
0x100c: mov     dword ptr [rbp - 8], 0
0x1013: jmp     0x1019
0x1015: add     dword ptr [rbp - 8], 1
0x1019: mov     eax, dword ptr [rbp - 8]
0x101c: movsxd  rdx, eax
0x101f: mov     rax, qword ptr [rbp - 0x18]
0x1023: add     rax, rdx
0x1026: movzx   eax, byte ptr [rax]
0x1029: test    al, al
0x102b: jne     0x1015
0x102d: mov     eax, dword ptr [rbp - 8]
0x1030: sub     eax, 2
0x1033: mov     dword ptr [rbp - 4], eax
0x1036: jmp     0x109d
0x1038: mov     eax, dword ptr [rbp - 4]
0x103b: movsxd  rdx, eax
0x103e: mov     rax, qword ptr [rbp - 0x18]
0x1042: add     rax, rdx
0x1045: movzx   eax, byte ptr [rax]
0x1048: mov     ecx, eax
0x104a: mov     eax, dword ptr [rbp - 4]
0x104d: cdqe
0x104f: lea     rdx, [rax + 1]
0x1053: mov     rax, qword ptr [rbp - 0x18]
0x1057: add     rax, rdx
0x105a: movzx   eax, byte ptr [rax]
0x105d: sub     ecx, eax
0x105f: mov     eax, dword ptr [rbp - 4]
0x1062: movsxd  rdx, eax
0x1065: mov     rax, qword ptr [rbp - 0x18]
0x1069: add     rax, rdx
0x106c: mov     edx, ecx
0x106e: mov     byte ptr [rax], dl
0x1070: mov     eax, dword ptr [rbp - 4]
0x1073: movsxd  rdx, eax
0x1076: mov     rax, qword ptr [rbp - 0x18]
0x107a: add     rax, rdx
0x107d: movzx   eax, byte ptr [rax]
0x1080: mov     edx, eax
0x1082: mov     eax, dword ptr [rbp - 4]
0x1085: lea     ecx, [rdx + rax]
0x1088: mov     eax, dword ptr [rbp - 4]
0x108b: movsxd  rdx, eax
0x108e: mov     rax, qword ptr [rbp - 0x18]
0x1092: add     rax, rdx
0x1095: mov     edx, ecx
0x1097: mov     byte ptr [rax], dl
0x1099: sub     dword ptr [rbp - 4], 1
0x109d: cmp     dword ptr [rbp - 4], 0
0x10a1: jns     0x1038
0x10a3: pop     rbp
0x10a4: ret

unsigned char enc[] = {210, 204, 198, 223, 171, 104, 149, 192, 148, 103, 103, 94, 82, 86, 140, 136, 136, 129, 79, 84, 83, 80, 72, 119, 121, 79, 87, 75, 70, 126, 121, 75, 73, 115, 122, 78, 77, 71, 65, 67, 140, 125};

int main()
{
    char input[100];
    memset(input, 0, sizeof(input));
    memcpy(input, enc, sizeof(enc));
    printf("Here is your flag:\n");
    func(input);
    printf("%s", input);
    return 0;
}